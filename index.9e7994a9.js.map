{"mappings":"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","sources":["node_modules/swiffy-slider/dist/js/swiffy-slider.js","src/js/util/util.js","src/js/core/eventable.js","src/js/slide/content.js","src/js/core/base.js","src/js/util/viewport-size.js","src/js/lightbox/lightbox.js","src/js/slide/loader.js","src/js/slide/placeholder.js","src/js/slide/zoom-level.js","src/js/util/dom-events.js","src/js/slide/pan-bounds.js","src/js/slide/slide.js","src/js/gestures/drag-handler.js","src/js/gestures/zoom-handler.js","src/js/gestures/tap-handler.js","src/js/gestures/gestures.js","src/js/main-scroll.js","src/js/keyboard.js","src/js/util/css-animation.js","src/js/util/spring-easer.js","src/js/util/spring-animation.js","src/js/util/animations.js","src/js/scroll-wheel.js","src/js/ui/ui-element.js","src/js/ui/button-arrow.js","src/js/ui/button-close.js","src/js/ui/button-zoom.js","src/js/ui/loading-indicator.js","src/js/ui/counter-indicator.js","src/js/ui/ui.js","src/js/slide/get-thumb-bounds.js","src/js/opener.js","src/js/photoswipe.js","src/js/index.js"],"sourcesContent":["const swiffyslider = function() {\r\n    return {\r\n        version: \"1.5.0\",\r\n        init(rootElement = document.body) {\r\n            for (let sliderElement of rootElement.querySelectorAll(\".swiffy-slider\")) {\r\n                this.initSlider(sliderElement);\r\n            }\r\n        },\r\n\r\n        initSlider(sliderElement) {\r\n            for (let navElement of sliderElement.querySelectorAll(\".slider-nav\")) {\r\n                let next = navElement.classList.contains(\"slider-nav-next\");\r\n                navElement.addEventListener(\"click\", () => this.slide(sliderElement, next), { passive: true });\r\n            }\r\n            for (let indicatorElement of sliderElement.querySelectorAll(\".slider-indicators\")) {\r\n                indicatorElement.addEventListener(\"click\", () => this.slideToByIndicator());\r\n                this.onSlideEnd(sliderElement, () => this.handleIndicators(sliderElement), 60);\r\n            }\r\n            if (sliderElement.classList.contains(\"slider-nav-autoplay\")) {\r\n                const timeout = sliderElement.getAttribute(\"data-slider-nav-autoplay-interval\") ? sliderElement.getAttribute(\"data-slider-nav-autoplay-interval\") : 2500;\r\n                this.autoPlay(sliderElement, timeout, sliderElement.classList.contains(\"slider-nav-autopause\"));\r\n            }\r\n            if ([\"slider-nav-autohide\", \"slider-nav-animation\"].some(className => sliderElement.classList.contains(className))) {\r\n                const threshold = sliderElement.getAttribute(\"data-slider-nav-animation-threshold\") ? sliderElement.getAttribute(\"data-slider-nav-animation-threshold\") : 0.3;\r\n                this.setVisibleSlides(sliderElement, threshold);\r\n            }\r\n        },\r\n\r\n        setVisibleSlides(sliderElement, threshold = 0.3) {\r\n            let observer = new IntersectionObserver(slides => {\r\n                slides.forEach(slide => {\r\n                    slide.isIntersecting ? slide.target.classList.add(\"slide-visible\") : slide.target.classList.remove(\"slide-visible\");\r\n                });\r\n                sliderElement.querySelector(\".slider-container>*:first-child\").classList.contains(\"slide-visible\") ? sliderElement.classList.add(\"slider-item-first-visible\") : sliderElement.classList.remove(\"slider-item-first-visible\");\r\n                sliderElement.querySelector(\".slider-container>*:last-child\").classList.contains(\"slide-visible\") ? sliderElement.classList.add(\"slider-item-last-visible\") : sliderElement.classList.remove(\"slider-item-last-visible\");\r\n            }, {\r\n                root: sliderElement.querySelector(\".slider-container\"),\r\n                threshold: threshold\r\n            });\r\n            for (let slide of sliderElement.querySelectorAll(\".slider-container>*\"))\r\n                observer.observe(slide);\r\n        },\r\n\r\n        slide(sliderElement, next = true) {\r\n            const container = sliderElement.querySelector(\".slider-container\");\r\n            const fullpage = sliderElement.classList.contains(\"slider-nav-page\");\r\n            const noloop = sliderElement.classList.contains(\"slider-nav-noloop\");\r\n            const nodelay = sliderElement.classList.contains(\"slider-nav-nodelay\");\r\n            const slides = container.children;\r\n            const gapWidth = parseInt(window.getComputedStyle(container).columnGap);\r\n            const scrollStep = slides[0].offsetWidth + gapWidth;\r\n            let scrollLeftPosition = next ?\r\n                container.scrollLeft + scrollStep :\r\n                container.scrollLeft - scrollStep;\r\n            if (fullpage) {\r\n                scrollLeftPosition = next ?\r\n                    container.scrollLeft + container.offsetWidth :\r\n                    container.scrollLeft - container.offsetWidth;\r\n            }\r\n            if (container.scrollLeft < 1 && !next && !noloop) {\r\n                scrollLeftPosition = (container.scrollWidth - container.offsetWidth);\r\n            }\r\n            if (container.scrollLeft >= (container.scrollWidth - container.offsetWidth) && next && !noloop) {\r\n                scrollLeftPosition = 0;\r\n            }\r\n            container.scroll({\r\n                left: scrollLeftPosition,\r\n                behavior: nodelay ? \"auto\" : \"smooth\"\r\n            });\r\n        },\r\n\r\n        slideToByIndicator() {\r\n            const indicator = window.event.target;\r\n            const indicatorIndex = Array.from(indicator.parentElement.children).indexOf(indicator);\r\n            const indicatorCount = indicator.parentElement.children.length;\r\n            const sliderElement = indicator.closest(\".swiffy-slider\");\r\n            const slideCount = sliderElement.querySelector(\".slider-container\").children.length;\r\n            const relativeSlideIndex = (slideCount / indicatorCount) * indicatorIndex;\r\n            this.slideTo(sliderElement, relativeSlideIndex);\r\n        },\r\n\r\n        slideTo(sliderElement, slideIndex) {\r\n            const container = sliderElement.querySelector(\".slider-container\");\r\n            const gapWidth = parseInt(window.getComputedStyle(container).columnGap);\r\n            const scrollStep = container.children[0].offsetWidth + gapWidth;\r\n            const nodelay = sliderElement.classList.contains(\"slider-nav-nodelay\");\r\n            container.scroll({\r\n                left: (scrollStep * slideIndex),\r\n                behavior: nodelay ? \"auto\" : \"smooth\"\r\n            });\r\n        },\r\n\r\n        onSlideEnd(sliderElement, delegate, timeout = 125) {\r\n            let isScrolling;\r\n            sliderElement.querySelector(\".slider-container\").addEventListener(\"scroll\", function() {\r\n                window.clearTimeout(isScrolling);\r\n                isScrolling = setTimeout(delegate, timeout);\r\n            }, { capture: false, passive: true });\r\n        },\r\n\r\n        autoPlay(sliderElement, timeout, autopause) {\r\n            timeout = timeout < 750 ? 750 : timeout;\r\n            let autoplayTimer = setInterval(() => this.slide(sliderElement), timeout);\r\n            const autoplayer = () => this.autoPlay(sliderElement, timeout, autopause);\r\n            if (autopause) {\r\n                [\"mouseover\", \"touchstart\"].forEach(function(event) {\r\n                    sliderElement.addEventListener(event, function() {\r\n                        window.clearTimeout(autoplayTimer);\r\n                    }, { once: true, passive: true });\r\n                });\r\n                [\"mouseout\", \"touchend\"].forEach(function(event) {\r\n                    sliderElement.addEventListener(event, function() {\r\n                        autoplayer();\r\n                    }, { once: true, passive: true });\r\n                });\r\n            }\r\n            return autoplayTimer;\r\n        },\r\n\r\n        handleIndicators(sliderElement) {\r\n            const container = sliderElement.querySelector(\".slider-container\");\r\n            const slidingAreaWidth = container.scrollWidth - container.offsetWidth;\r\n            const percentSlide = (container.scrollLeft / slidingAreaWidth);\r\n            for (let scrollIndicatorContainers of sliderElement.querySelectorAll(\".slider-indicators\")) {\r\n                let scrollIndicators = scrollIndicatorContainers.children;\r\n                let activeIndicator = Math.abs(Math.round((scrollIndicators.length - 1) * percentSlide));\r\n                for (let element of scrollIndicators)\r\n                    element.classList.remove(\"active\");\r\n                scrollIndicators[activeIndicator].classList.add(\"active\");\r\n            }\r\n        }\r\n    };\r\n}();\r\n\r\nwindow.swiffyslider = swiffyslider;\r\nif (!document.currentScript.hasAttribute(\"data-noinit\")) {\r\n    window.addEventListener(\"load\", () => {\r\n        swiffyslider.init();\r\n    });\r\n}","/**\r\n  * Creates element and optionally appends it to another.\r\n  *\r\n  * @param {String} className\r\n  * @param {String|NULL} tagName\r\n  * @param {Element|NULL} appendToEl\r\n  */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Object} p1 Point\r\n * @param {Object} p2 Point\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {Number} val\r\n * @param {Number} min\r\n * @param {Number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {Number} x\r\n * @param {Number|null} y\r\n * @param {Number|null} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {DOMElement} el\r\n * @param {Number} x\r\n * @param {Number|null} y\r\n * @param {Number|null} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {Element} el\r\n * @param {String} prop CSS property to animate\r\n * @param {Number} duration in ms\r\n * @param {String|NULL} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {Event} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {Element|NodeList|String} option\r\n * @param {String|null} legacySelector\r\n * @param {Element|null} parent\r\n * @returns Element[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * @param {*} v\r\n * @returns Boolean\r\n */\r\nexport function isClass(fn) {\r\n  return typeof fn === 'function' && /^\\s*class\\s+/.test(fn.toString());\r\n}\r\n","/**\r\n * Base PhotoSwipe event object\r\n */\r\nclass PhotoSwipeEvent {\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    this._listeners = {};\r\n    this._filters = {};\r\n  }\r\n\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = new PhotoSwipeEvent(name, details);\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\nclass Content {\r\n  /**\r\n   * @param {Object} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {Slide|undefined} slide Slide that requested the image,\r\n   *                                can be undefined if image was requested by something else\r\n   *                                (for example by lazy-loader)\r\n   */\r\n  constructor(itemData, instance) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    this.element = createElement('pswp__img', 'img');\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      this.element.srcset = this.data.srcset;\r\n    }\r\n\r\n    this.element.src = this.data.src;\r\n\r\n    this.element.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (this.element.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      this.element.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      this.element.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = this.element;\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          && (!image.dataset.largestUsedSize || width > image.dataset.largestUsedSize)) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = width;\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            this.element.decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nimport Eventable from './eventable';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content';\r\n\r\n\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if (dataSource.length) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource.gallery) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  createContentFromData(slideData) {\r\n    return new Content(slideData, this);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallerySelecor and childSelector options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {Element} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {Element} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    this.applyFilters('domItemData', itemData, element, linkEl);\r\n\r\n    return itemData;\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","export function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {String}  prop 'left', 'top', 'bottom', 'right'\r\n * @param {Object}  options PhotoSwipe options\r\n * @param {Object}  viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {Object}  itemData Data about the slide\r\n * @param {Integer} index Slide index\r\n * @returns {Number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    if (options[legacyPropName]) {\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","/**\r\n * PhotoSwipe lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\n\r\nimport {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  constructor(options) {\r\n    super();\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n  }\r\n\r\n  init() {\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not ideal way to detect them.\r\n    //\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    const dataSource = {\r\n      gallery: e.currentTarget\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {Event} e click event\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = e.target;\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      e.currentTarget\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {Integer} index\r\n   * @param {Array|Object|null} dataSource\r\n   * @param {Point|null} initialPoint\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isClass(options.pswpModule)) {\r\n      promiseArray.push(options.pswpModule);\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(options.pswpModule());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    // Pass data to PhotoSwipe and open init\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(null, this.options) // eslint-disable-line\r\n        : new module(null, this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    Object.keys(this._listeners).forEach((name) => {\r\n      this._listeners[name].forEach((fn) => {\r\n        pswp.on(name, fn);\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    Object.keys(this._filters).forEach((name) => {\r\n      this._filters[name].forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = null;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = null;\r\n      window.pswp = null;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  destroy() {\r\n    if (this.pswp) {\r\n      this.pswp.destroy();\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = null;\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Returns cache key by slide index and data\r\n *\r\n * @param {Object} itemData\r\n * @param {Integer} index\r\n * @returns {String}\r\n */\r\nexport function getKey(itemData, index) {\r\n  if (itemData && itemData.src) {\r\n    return itemData.src + '_' + index;\r\n  }\r\n  return index;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {Object} itemData Data about the slide\r\n * @param {PhotoSwipeBase}  instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {Integer} index\r\n * @returns {Object|Boolean} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  content.key = getKey(itemData, index);\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  const viewportSize = instance.viewportSize || getViewportSize(options);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {Integer} index Slide index\r\n * @param {Object}  instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {Integer} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    const itemData = this.pswp.getItemData(index);\r\n    const key = getKey(itemData, index);\r\n    // try to get cached content\r\n    let content = this.getContentByKey(key);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        content.key = key;\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByKey(this.getKeyBySlide(slide));\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data);\r\n      if (content) {\r\n        content.key = this.getKeyBySlide(slide);\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByKey(content.key);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {String} key\r\n   */\r\n  removeByKey(key) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.key === key);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  getContentByKey(key) {\r\n    return this._cachedItems.find(content => content.key === key);\r\n  }\r\n\r\n  getKeyBySlide(slide) {\r\n    return getKey(slide.data, slide.index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {String|false} imageSrc\r\n   * @param {Element} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      this.element.decoding = 'async';\r\n      this.element.alt = '';\r\n      this.element.src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\n\r\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {Object} options PhotoSwipe options\r\n   * @param {Object} itemData Slide data\r\n   * @param {Integer} index Slide index\r\n   * @param {PhotoSwipe|undefined} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @param {Mixed} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // zoom.initial\r\n    // zoom.secondary\r\n    // zoom.max\r\n    const optionValue = this.options[optionPrefix + 'ZoomLevel'];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type Can be multiple, separated by space.\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   * @param {Boolean} unbind Whether the event should be added or removed\r\n   * @param {Boolean} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = (unbind ? 'remove' : 'add') + 'EventListener';\r\n    type = type.split(' ');\r\n    type.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nimport {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\nclass PanBounds {\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    this.center = {};\r\n    this.max = {};\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  // _getItemBounds\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  // _calculateItemBoundsForAxis\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {String} axis x or y\r\n   * @param {Object} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","/**\r\n * Renders and allows to control a single slide\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\nclass Slide {\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    this.width = this.content.width;\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {Boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append HTML content to slide container\r\n   * (usually item.html or error message)\r\n   *\r\n   * @param {DOMElement} containerEl\r\n   * @param {String} html\r\n   */\r\n  setSlideHTML(html) {\r\n    const { container } = this;\r\n    if (html.tagName) {\r\n      container.appendChild(html);\r\n    } else {\r\n      container.innerHTML = html;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {Boolean} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param  {Number} destZoomLevel      Destination zoom level.\r\n   * @param  {Object|false} centerPoint  Transform origin center point,\r\n   *                                     or false if viewport center should be used.\r\n   * @param  {Number} transitionDuration Transition duration, may be set to 0.\r\n   * @param  {Boolean|null} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {Boolean|null}              Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {Number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {String} axis\r\n   * @param {Object|null} centerPoint point based on which zoom is performed,\r\n   *                                  usually refers to the current mouse position,\r\n   *                                  if false - viewport center will be used.\r\n   * @param {Number|null} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {Number} panX\r\n   * @param {Number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {Number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","/**\r\n * Handles single pointer dragging\r\n */\r\n\r\nimport {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\nclass DragHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @param {String} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @param {Number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @param {String} axis\r\n   * @param {Number} potentialPan\r\n   * @param {Number|null} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    this._startPan = {};\r\n\r\n    this._startZoomPoint = {};\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {Boolean} ignoreGesture Wether gesture coordinates should be ignored\r\n   *                                when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * Tap, double-tap handler.\r\n */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {Event} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(event.target.closest('.pswp__container'));\r\n}\r\n\r\nclass TapHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n\r\n  click(point, originalEvent) {\r\n    const targetClassList = originalEvent.target.classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const optionValue = pswp.options[actionName + 'Action'];\r\n\r\n    if (pswp.dispatch(actionName + 'Action', { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nimport {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\nclass Gestures {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    this.p1 = {}; // the first pressed pointer\r\n    this.p2 = {}; // the second pressed pointer\r\n    this.prevP1 = {};\r\n    this.prevP2 = {};\r\n    this.startP1 = {};\r\n    this.startP2 = {};\r\n    this.velocity = {};\r\n\r\n    this._lastStartP1 = {};\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @param {Number} axis\r\n   * @param {Number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @param {Event} e\r\n   * @param {String} pointerType Normalized pointer type ('up', 'down' or 'move')\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === e.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(e, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(e, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      this._numActivePoints = 0;\r\n      if (e.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (e.touches && e.touches.length > 0) {\r\n          this._convertEventPosToPoint(e.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (e.touches.length > 1) {\r\n            this._convertEventPosToPoint(e.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(e, this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    // e.pointerId can be zero\r\n    if (e.pointerId !== undefined) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nimport {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {Boolean} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {Integer} diff\r\n   * @returns {Boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {Number} x\r\n   * @param {Boolean} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    let newSlideIndexOffset;\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","/**\r\n *\r\n * keyboard.js\r\n *\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n *\r\n */\r\n\r\nimport { specialKeyUsed } from './util/util.js';\r\n\r\nclass Keyboard {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = document.activeElement;\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    let keydownAction;\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {Event} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(e.target)) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","/**\r\n * Runs CSS transition.\r\n */\r\n\r\nimport { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\nclass CSSAnimation {\r\n  // onComplete can be unpredictable, be careful about current state\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    this._target = target;\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","/**\r\n * Spring easing helper\r\n */\r\n\r\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\nclass SpringEaser {\r\n  /**\r\n   * @param {Number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {Number} dampingRatio Determines how bouncy animation will be.\r\n   *                              From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   *                              \"overshoot\" refers to part of animation that\r\n   *                              goes beyond the final value.\r\n   *\r\n   * @param {Number} naturalFrequency Determines how fast animation will slow down.\r\n   *                                  The higher value - the stiffer the transition will be,\r\n   *                                  and the faster it will slow down.\r\n   *                                  Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Number} deltaPosition Difference between current and end position of the animation\r\n   * @param {Number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {Number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\nclass SpringAnimation {\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    this._onFinish = onFinish;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/**\r\n * Manages animations\r\n */\r\n\r\nclass Animations {\r\n  constructor() {\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  _start(props, isSpring) {\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  out = out.split('%d').join(svgData.size || 32); // replace all %d with size\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = tagName.toLowerCase();\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        element.type = 'button';\r\n      }\r\n\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        element.title = pswp.options[name + 'Title'];\r\n      } else if (data.title) {\r\n        element.title = data.title;\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', false, pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(element);\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        element.disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","const closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","const zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom (z)',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","export const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    let isVisible;\r\n    let delayTimeout;\r\n\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","export const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerHTML = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {Boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    // TODO: ensure this works when dynamically adding or removing slides\r\n    if (pswp.getNumItems() === 1) {\r\n      pswp.element.classList.add('pswp--one-slide');\r\n    }\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","function getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  // Coordinates of the image,\r\n  // as if it was not cropped,\r\n  // height is calculated automatically\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {Integer} index\r\n * @param {Object} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns Object|undefined\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  if (event.thumbBounds) {\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.w,\r\n        itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\n\r\nimport {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\nclass Opener {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.type === 'image')\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = MIN_OPACITY;\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = MIN_OPACITY;\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = MIN_OPACITY;\r\n        }\r\n        pswp.element.style.opacity = 1;\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = MIN_OPACITY;\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(this._placeholder).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch('initialZoom' + (this.isOpening ? 'In' : 'Out'));\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = 1;\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', pswp.options.bgOpacity);\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', 1);\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', 0);\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', 0);\r\n    }\r\n  }\r\n\r\n  _setClosedStateZoomPan(animate) {\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} target\r\n   * @param {String} prop\r\n   * @param {String} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  constructor(items, options) {\r\n    super();\r\n\r\n    this.items = items;\r\n\r\n    this._prepareOptions(options);\r\n\r\n    // offset of viewport relative to document\r\n    this.offset = {};\r\n\r\n    this._prevViewportSize = {};\r\n\r\n    // Size of scrollable PhotoSwipe viewport\r\n    this.viewportSize = {};\r\n\r\n    // background (backdrop) opacity\r\n    this.bgOpacity = 1;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // init modules\r\n    // _modules.forEach(function (module) {\r\n    //   module();\r\n    // });\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', this.currIndex, this._initialItemData, true);\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param  {Integer} New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  setContent(holder, index) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param  {Boolean} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = this.bgOpacity * this.options.bgOpacity;\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', -1);\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","import { swiffyslider } from 'swiffy-slider';\r\nimport PhotoSwipeLightbox from '../../node_modules/photoswipe/dist/photoswipe-lightbox.esm';\r\nimport PhotoSwipe from '../../node_modules/photoswipe/dist/photoswipe.esm';\r\n\r\nconst lightbox = new PhotoSwipeLightbox({\r\n  gallery: '#gallery--with-custom-caption',\r\n  children: '.pswp-gallery__item',\r\n  pswpModule: PhotoSwipe,\r\n});\r\n\r\nlightbox.on('uiRegister', function () {\r\n  lightbox.pswp.ui.registerElement({\r\n    name: 'custom-caption',\r\n    order: 9,\r\n    isButton: false,\r\n    appendTo: 'root',\r\n    html: 'Caption text',\r\n    onInit: (el, pswp) => {\r\n      lightbox.pswp.on('change', () => {\r\n        const currSlideElement = lightbox.pswp.currSlide.data.element;\r\n        let captionHTML = '';\r\n        if (currSlideElement) {\r\n          const hiddenCaption = currSlideElement.querySelector(\r\n            '.hidden-caption-content'\r\n          );\r\n          if (hiddenCaption) {\r\n            // get caption from element with class hidden-caption-content\r\n            captionHTML = hiddenCaption.innerHTML;\r\n          } else {\r\n            // get caption from alt attribute\r\n            captionHTML = currSlideElement\r\n              .querySelector('img')\r\n              .getAttribute('alt');\r\n          }\r\n        }\r\n        el.innerHTML = captionHTML || '';\r\n      });\r\n    },\r\n  });\r\n});\r\n\r\nlightbox.init();\r\n\r\n// SWIFFY SLIDER\r\nwindow.swiffyslider = swiffyslider;\r\nwindow.addEventListener('load', () => {\r\n  window.swiffyslider.init();\r\n});\r\n\r\n// ADD ACTIVE CLASS ON SCROLL TO HEADER\r\nlet scrollpos = window.scrollY;\r\nconst header = document.querySelector('.header');\r\nconst header_height = header.offsetHeight;\r\nconst addClassOnScroll = () => header.classList.add('header--onscroll');\r\nconst removeClassOnScroll = () => header.classList.remove('header--onscroll');\r\nwindow.addEventListener('scroll', function () {\r\n  scrollpos = window.scrollY;\r\n  if (scrollpos >= header_height) {\r\n    addClassOnScroll();\r\n  } else {\r\n    removeClassOnScroll();\r\n  }\r\n});\r\n\r\n// HAMBURGER MENU\r\nconst hamburger = document.querySelector('.hamburger');\r\nconst menu = document.querySelector('.menu');\r\nconst links = menu.querySelectorAll('.menu__link');\r\nconst toggle = () => {\r\n  hamburger.classList.toggle('hamburger--isopen');\r\n  menu.classList.toggle('menu--isopen');\r\n};\r\nhamburger.addEventListener('click', toggle);\r\nlinks.forEach((link) => link.addEventListener('click', toggle));\r\n\r\n//ADD ACTIVE ON SCROLL TO LINK MENU\r\nconst sections = document.querySelectorAll('.section');\r\nwindow.addEventListener('scroll', () => {\r\n  let current = '';\r\n  sections.forEach((section) => {\r\n    const sectionTop = section.offsetTop;\r\n    const sectionHeight = section.clientHeight;\r\n    if (window.scrollY >= sectionTop - sectionHeight / 4) {\r\n      current = section.getAttribute('id');\r\n    }\r\n  });\r\n  links.forEach((link) => {\r\n    link.classList.remove('menu__link--active');\r\n    if (link.classList.contains(current)) {\r\n      link.classList.add('menu__link--active');\r\n    }\r\n  });\r\n});\r\n"],"names":["swiffyslider","version","[object Object]","rootElement","document","body","sliderElement","querySelectorAll","this","initSlider","navElement","next","classList","contains","addEventListener","slide","passive","indicatorElement","slideToByIndicator","onSlideEnd","handleIndicators","timeout","getAttribute","autoPlay","some","className","threshold","setVisibleSlides","observer","IntersectionObserver","slides","forEach","isIntersecting","target","add","remove","querySelector","root","observe","container","fullpage","noloop","nodelay","children","gapWidth","parseInt","window","getComputedStyle","columnGap","scrollStep","offsetWidth","scrollLeftPosition","scrollLeft","scrollWidth","scroll","left","behavior","indicator","event","indicatorIndex","Array","from","parentElement","indexOf","indicatorCount","length","closest","relativeSlideIndex","slideTo","slideIndex","delegate","isScrolling","clearTimeout","setTimeout","capture","autopause","autoplayTimer","setInterval","autoplayer","once","slidingAreaWidth","percentSlide","scrollIndicatorContainers","scrollIndicators","activeIndicator","Math","abs","round","element","$12ba7f17b3976b6d$var$createElement","tagName","appendToEl","el","createElement","appendChild","$12ba7f17b3976b6d$var$setWidthHeight","w","h","style","width","height","currentScript","hasAttribute","init","$12ba7f17b3976b6d$var$getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","isArray","selector","$12ba7f17b3976b6d$var$PhotoSwipeEvent","type","details","Object","assign","preventDefault","defaultPrevented","imageSrc","decoding","alt","src","setAttribute","transformOrigin","transform","x","y","scale","propValue","undefined","$12ba7f17b3976b6d$var$toTransformString","parentNode","constructor","itemData","instance","data","Number","isAttached","hasSlide","state","$12ba7f17b3976b6d$var$LOAD_STATE","dispatch","content","placeholder","keepPlaceholder","destroy","isLazy","reload","usePlaceholder","placeholderSrc","applyFilters","msrc","isFirstSlide","$12ba7f17b3976b6d$var$Placeholder","isImageContent","loadImage","innerHTML","html","updateContentSize","srcset","complete","onLoaded","onload","onerror","onError","pswp","isActive","heavyAppended","append","displayError","isError","setDisplayedSize","image","dataset","largestUsedSize","sizes","load","isLoading","errorMsgEl","innerText","options","errorMsg","removePlaceholder","isDecoding","requestAnimationFrame","decode","then","appendImage","catch","activate","$12ba7f17b3976b6d$var$parsePaddingOption","prop","viewportSize","index","paddingFn","paddingValue","padding","legacyPropName","toUpperCase","slice","maxHeight","panAreaSize","elementSize","maxWidth","hRatio","vRatio","fit","min","fill","vFill","initial","_getInitial","secondary","_getSecondary","max","_getMax","zoomLevels","slideData","optionPrefix","optionValue","currZoomLevel","_parseZoomLevelOption","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","_listeners","addFilter","name","fn","priority","_filters","push","sort","f1","f2","filter","removeFilter","args","apply","on","listener","off","call","numItems","dataSource","gallery","items","_getGalleryDOMElements","$12ba7f17b3976b6d$var$Content","dataSourceItem","_domElementToItemData","galleryElement","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","pswpCropped","cropped","thumbCropped","e","which","ctrlKey","metaKey","altKey","shiftKey","test","toString","$f26a9b730ef64151$var$createElement","$f26a9b730ef64151$var$equalizePoints","p1","p2","id","$f26a9b730ef64151$var$roundPoint","p","$f26a9b730ef64151$var$getDistanceBetween","sqrt","$f26a9b730ef64151$var$pointsEqual","$f26a9b730ef64151$var$clamp","val","$f26a9b730ef64151$var$toTransformString","$f26a9b730ef64151$var$setTransform","$f26a9b730ef64151$var$setTransitionStyle","duration","ease","transition","$f26a9b730ef64151$var$setWidthHeight","defineProperty","get","$f26a9b730ef64151$var$supportsPassive","$f26a9b730ef64151$var$DOMEvents","_pool","_toggleListener","poolItem","unbind","skipPool","methodName","split","eType","eventOptions","$f26a9b730ef64151$var$parsePaddingOption","$f26a9b730ef64151$var$getPanAreaSize","$f26a9b730ef64151$var$PanBounds","center","reset","_updateAxis","axis","elSize","panOffset","$f26a9b730ef64151$var$Slide","currIndex","currentResolution","opener","isOpen","$f26a9b730ef64151$var$ZoomLevel","pan","contentLoader","getContentBySlide","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","deactivate","holderElement","calculateSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","setSlideHTML","update","panTo","force","scaleMultiplier","sizeChanged","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","startTransition","getCurrentTransform","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","correctPan","zoomFactor","panY","panX","_applyZoomTransform","currSlide","zoom","newResolution","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","projectedPosition","panPos","initialVelocity","decelerationRate","$f26a9b730ef64151$var$project","vDragRatio","projectedVDragRatio","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","isPan","start","end","onUpdate","pos","restoreBgOpacity","animationProgressRatio","floor","delta","isPannable","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","moveTo","newMainScrollX","potentialPan","customFriction","$f26a9b730ef64151$var$getZoomPointsCenter","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","close","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","_setResolution","naturalFrequency","now","newZoomLevel","onComplete","$f26a9b730ef64151$var$didTapOnMainContent","originalEvent","targetClassList","isImageClick","isBackgroundClick","_doClickOrTapAction","actionName","toggleZoom","clickToCloseNonZoomable","toggle","$f26a9b730ef64151$var$Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","navigator","maxTouchPoints","drag","$f26a9b730ef64151$var$DragHandler","$f26a9b730ef64151$var$ZoomHandler","tapHandler","$f26a9b730ef64151$var$TapHandler","_bindEvents","scrollWrap","ontouchmove","ontouchend","pref","down","up","cancel","events","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","e2","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","e3","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","e4","_finishTap","change","_updatePrevPoints","raf","time","_getVelocity","e5","click","tapDelay","doubleTapAction","_tapTimer","doubleTap","tap","displacement","cancelAnimationFrame","e6","pointerIndex","findIndex","ongoingPoiner","e7","pointerId","splice","_convertEventPosToPoint","touches","diff","axisToCheck","e8","pageX","offset","pageY","e9","stopPropagation","resetPosition","resizeSlides","slideWidthChanged","newSlideWidth","slideWidth","itemHolders","itemHolder","_containerShiftIndex","resize","i","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_currPositionIndex","positionDifference","_prevPositionIndex","tempHolder","diffAbs","i1","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","$f26a9b730ef64151$var$Keyboard","initialPointerPos","_focusRoot","_onFocusIn","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","e10","$f26a9b730ef64151$var$specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","e11","template","props","_target","_onTransitionEnd","_firstFrameTimeout","e12","_finalizeAnimation","_finished","onFinish","_onComplete","removeEventListener","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFSin","sin","dumpedFCos","easer","$f26a9b730ef64151$var$SpringEaser","prevTime","_onFinish","animationLoop","_raf","easeFrame","$f26a9b730ef64151$var$Animations","activeAnimations","_start","isSpring","$f26a9b730ef64151$var$CSSAnimation","animation","stop","isPanRunning","$f26a9b730ef64151$var$ScrollWheel","_onWheel","e13","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","$f26a9b730ef64151$var$UIElement","elementHTML","isButton","toLowerCase","title","htmlData","isCustomSVG","out","join","svgData","size","outlineID","inner","$f26a9b730ef64151$var$addElementHTML","onInit","onClick","onclick","e14","appendTo","topBar","isNextButton","loop","disabled","$f26a9b730ef64151$var$initArrowButton","$f26a9b730ef64151$var$arrowNext","order","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","preloaderDelay","e15","ui","counterElement","indexIndicatorSep","isZoomedIn","uiElementsData","$f26a9b730ef64151$var$closeButton","$f26a9b730ef64151$var$arrowPrev","$f26a9b730ef64151$var$zoomButton","$f26a9b730ef64151$var$loadingIndicator","$f26a9b730ef64151$var$counterIndicator","a","b","isRegistered","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","_lastUpdatedZoomLevel","currZoomLevelDiff","secondaryIsHigher","$f26a9b730ef64151$var$setZoomedIn","imageClickAction","$f26a9b730ef64151$var$PhotoSwipeEvent","$f26a9b730ef64151$var$LOAD_STATE","$f26a9b730ef64151$var$Placeholder","isClosed","_prepareOpen","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_thumbBounds","_initialThumbBounds","getThumbBounds","_placeholder","getPlaceholderElement","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","img","Promise","resolve","reject","$8f6a480bb40b134f$var$lightbox","$12ba7f17b3976b6d$export$2e2bcd8739ae039","pswpModule","$f26a9b730ef64151$var$Content","$f26a9b730ef64151$var$getElementsFromOption","thumbBounds","thumbSelector","matches","thumbnail","imageWidth","imageHeight","getBoundingClientRect","thumbAreaRect","fillZoomLevel","offsetX","offsetY","top","$f26a9b730ef64151$var$getBoundsByElement","currSlideElement","captionHTML","hiddenCaption","$8f6a480bb40b134f$var$scrollpos","scrollY","$8f6a480bb40b134f$var$header","$8f6a480bb40b134f$var$header_height","offsetHeight","$8f6a480bb40b134f$var$hamburger","$8f6a480bb40b134f$var$menu","$8f6a480bb40b134f$var$links","$8f6a480bb40b134f$var$toggle","link","$8f6a480bb40b134f$var$sections","current","section","sectionTop","offsetTop","sectionHeight","clientHeight"],"version":3,"file":"index.9e7994a9.js.map"}